// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logger.proto

package logger

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetCountRequest struct {
	TargetCat            string   `protobuf:"bytes,1,opt,name=target_cat,json=targetCat,proto3" json:"target_cat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCountRequest) Reset()         { *m = GetCountRequest{} }
func (m *GetCountRequest) String() string { return proto.CompactTextString(m) }
func (*GetCountRequest) ProtoMessage()    {}
func (*GetCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_logger_609dbf2cef69a7aa, []int{0}
}
func (m *GetCountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCountRequest.Unmarshal(m, b)
}
func (m *GetCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCountRequest.Marshal(b, m, deterministic)
}
func (dst *GetCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCountRequest.Merge(dst, src)
}
func (m *GetCountRequest) XXX_Size() int {
	return xxx_messageInfo_GetCountRequest.Size(m)
}
func (m *GetCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCountRequest proto.InternalMessageInfo

func (m *GetCountRequest) GetTargetCat() string {
	if m != nil {
		return m.TargetCat
	}
	return ""
}

type GetCountResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 string   `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCountResponse) Reset()         { *m = GetCountResponse{} }
func (m *GetCountResponse) String() string { return proto.CompactTextString(m) }
func (*GetCountResponse) ProtoMessage()    {}
func (*GetCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_logger_609dbf2cef69a7aa, []int{1}
}
func (m *GetCountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCountResponse.Unmarshal(m, b)
}
func (m *GetCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCountResponse.Marshal(b, m, deterministic)
}
func (dst *GetCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCountResponse.Merge(dst, src)
}
func (m *GetCountResponse) XXX_Size() int {
	return xxx_messageInfo_GetCountResponse.Size(m)
}
func (m *GetCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCountResponse proto.InternalMessageInfo

func (m *GetCountResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetCountResponse) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type CountUpMessage struct {
	TargetCat            string   `protobuf:"bytes,1,opt,name=target_cat,json=targetCat,proto3" json:"target_cat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountUpMessage) Reset()         { *m = CountUpMessage{} }
func (m *CountUpMessage) String() string { return proto.CompactTextString(m) }
func (*CountUpMessage) ProtoMessage()    {}
func (*CountUpMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_logger_609dbf2cef69a7aa, []int{2}
}
func (m *CountUpMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountUpMessage.Unmarshal(m, b)
}
func (m *CountUpMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountUpMessage.Marshal(b, m, deterministic)
}
func (dst *CountUpMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountUpMessage.Merge(dst, src)
}
func (m *CountUpMessage) XXX_Size() int {
	return xxx_messageInfo_CountUpMessage.Size(m)
}
func (m *CountUpMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CountUpMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CountUpMessage proto.InternalMessageInfo

func (m *CountUpMessage) GetTargetCat() string {
	if m != nil {
		return m.TargetCat
	}
	return ""
}

type CountUpResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 string   `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountUpResponse) Reset()         { *m = CountUpResponse{} }
func (m *CountUpResponse) String() string { return proto.CompactTextString(m) }
func (*CountUpResponse) ProtoMessage()    {}
func (*CountUpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_logger_609dbf2cef69a7aa, []int{3}
}
func (m *CountUpResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountUpResponse.Unmarshal(m, b)
}
func (m *CountUpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountUpResponse.Marshal(b, m, deterministic)
}
func (dst *CountUpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountUpResponse.Merge(dst, src)
}
func (m *CountUpResponse) XXX_Size() int {
	return xxx_messageInfo_CountUpResponse.Size(m)
}
func (m *CountUpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountUpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountUpResponse proto.InternalMessageInfo

func (m *CountUpResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CountUpResponse) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func init() {
	proto.RegisterType((*GetCountRequest)(nil), "GetCountRequest")
	proto.RegisterType((*GetCountResponse)(nil), "GetCountResponse")
	proto.RegisterType((*CountUpMessage)(nil), "CountUpMessage")
	proto.RegisterType((*CountUpResponse)(nil), "CountUpResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggerClient interface {
	GetCount(ctx context.Context, in *GetCountRequest, opts ...grpc.CallOption) (*GetCountResponse, error)
	CountUp(ctx context.Context, in *CountUpMessage, opts ...grpc.CallOption) (*CountUpResponse, error)
}

type loggerClient struct {
	cc *grpc.ClientConn
}

func NewLoggerClient(cc *grpc.ClientConn) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) GetCount(ctx context.Context, in *GetCountRequest, opts ...grpc.CallOption) (*GetCountResponse, error) {
	out := new(GetCountResponse)
	err := c.cc.Invoke(ctx, "/Logger/GetCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) CountUp(ctx context.Context, in *CountUpMessage, opts ...grpc.CallOption) (*CountUpResponse, error) {
	out := new(CountUpResponse)
	err := c.cc.Invoke(ctx, "/Logger/CountUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServer is the server API for Logger service.
type LoggerServer interface {
	GetCount(context.Context, *GetCountRequest) (*GetCountResponse, error)
	CountUp(context.Context, *CountUpMessage) (*CountUpResponse, error)
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_GetCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).GetCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Logger/GetCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).GetCount(ctx, req.(*GetCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_CountUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUpMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).CountUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Logger/CountUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).CountUp(ctx, req.(*CountUpMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCount",
			Handler:    _Logger_GetCount_Handler,
		},
		{
			MethodName: "CountUp",
			Handler:    _Logger_CountUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logger.proto",
}

func init() { proto.RegisterFile("logger.proto", fileDescriptor_logger_609dbf2cef69a7aa) }

var fileDescriptor_logger_609dbf2cef69a7aa = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xc9, 0x4f, 0x4f,
	0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x32, 0xe0, 0xe2, 0x77, 0x4f, 0x2d, 0x71,
	0xce, 0x2f, 0xcd, 0x2b, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe5, 0xe2, 0x2a,
	0x49, 0x2c, 0x4a, 0x4f, 0x2d, 0x89, 0x4f, 0x4e, 0x2c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c,
	0xe2, 0x84, 0x88, 0x38, 0x27, 0x96, 0x28, 0x59, 0x71, 0x09, 0x20, 0x74, 0x14, 0x17, 0xe4, 0xe7,
	0x15, 0xa7, 0x0a, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x42, 0x15, 0x83, 0xd9, 0x20, 0xb1,
	0xec, 0xcc, 0xbc, 0x14, 0x09, 0x26, 0x88, 0x18, 0x88, 0xad, 0xa4, 0xcf, 0xc5, 0x07, 0xd6, 0x18,
	0x5a, 0xe0, 0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x4a, 0xc8, 0x32, 0x4b, 0x2e, 0x7e, 0xa8, 0x06,
	0x52, 0xed, 0x32, 0xca, 0xe6, 0x62, 0xf3, 0x01, 0xfb, 0x54, 0xc8, 0x90, 0x8b, 0x03, 0xe6, 0x62,
	0x21, 0x01, 0x3d, 0x34, 0xef, 0x4a, 0x09, 0xea, 0xa1, 0x7b, 0x47, 0x89, 0x41, 0x48, 0x8f, 0x8b,
	0x1d, 0x6a, 0xaf, 0x10, 0xbf, 0x1e, 0xaa, 0x93, 0xa5, 0x04, 0xf4, 0xd0, 0x9c, 0xa4, 0xc4, 0x90,
	0xc4, 0x06, 0x0e, 0x4d, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xa6, 0x94, 0x28, 0x5d,
	0x01, 0x00, 0x00,
}
